package com.example.jarkataee.dao;

import com.example.jarkataee.config.DatabaseConfig;
import com.example.jarkataee.domain.City;
import com.example.jarkataee.domain.Country;

import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class CountryDaoImpl implements CountryDao {


    public void createTableIfNotExists() throws SQLException {
        try (Connection conn = DatabaseConfig.getConnection();
             Statement stmt = conn.createStatement()) {

            ResultSet countryTableCheck = conn.getMetaData().getTables(null, null, "COUNTRIES", null);

            if (!countryTableCheck.next()) {
                String createCountryTableSQL = "CREATE TABLE countries (" +
                        "id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "name VARCHAR2(100) UNIQUE NOT NULL, " +
                        "cities VARCHAR2(1000), " +
                        "largest_city VARCHAR2(100)" +
                        ")";
                stmt.executeUpdate(createCountryTableSQL);
                System.out.println("Table 'countries' created successfully.");
            } else {
                System.out.println("Table 'countries' already exists.");
            }
        }
    }



    public Country getCountryByName(String name) throws SQLException {
        try (Connection conn = DatabaseConfig.getConnection()) {
            String query = "SELECT * FROM countries WHERE name = ?";

            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, name);
                ResultSet rs = stmt.executeQuery();

                if (rs.next()) {
                    String countryName = rs.getString("name");
                    String cityString = rs.getString("cities");  // Comma-separated cities
                    List<String> cities = Arrays.asList(cityString.split(", "));
                    String largestCity = rs.getString("largest_city");

                    return new Country(countryName, cities, largestCity);
                }
            }
        }
        return null;
    }


    public List<String> getCitiesByCountry(String countryName) throws SQLException {
        String query = "SELECT cities FROM countries WHERE name = ?";
        List<String> cities = new ArrayList<>();

        try (Connection conn = DatabaseConfig.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            // Set the country name parameter
            stmt.setString(1, countryName);
            ResultSet rs = stmt.executeQuery();

            // Retrieve the cities string and split it into a list
            if (rs.next()) {
                String citiesString = rs.getString("cities");  // Assuming cities are stored as a comma-separated string
                if (citiesString != null && !citiesString.isEmpty()) {
                    cities = Arrays.asList(citiesString.split(",\\s*"));  // Split on commas and trim spaces
                }
            }
        }

        return cities;
    }


    @Override
    public void saveCountry(Country country) throws SQLException {
        try (Connection conn = DatabaseConfig.getConnection()) {
            String insertCountrySQL = "INSERT INTO countries (name, cities, largest_city) VALUES (?, ?, ?)";

            try (PreparedStatement stmt = conn.prepareStatement(insertCountrySQL)) {
                stmt.setString(1, country.getName());
                stmt.setString(2, String.join(", ", country.getCities()));  // Convert the list of cities to a comma-separated string
                stmt.setString(3, country.getLargestCity());
                stmt.executeUpdate();
            }
        }
    }




    @Override
    public String getLargestCityFromDbOrApi(String country) {
        return null;
    }
}
